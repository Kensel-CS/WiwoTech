import { __awaiter, __generator } from "tslib";
import { validateAndGetMessage } from '../utils';
import { useChannelActionContext } from '../../../context/ChannelActionContext';
import { useChatContext } from '../../../context/ChatContext';
import { useTranslationContext } from '../../../context/TranslationContext';
export var useDeleteHandler = function (message, notifications) {
    if (notifications === void 0) { notifications = {}; }
    var getErrorNotification = notifications.getErrorNotification, notify = notifications.notify;
    var updateMessage = useChannelActionContext('useDeleteHandler').updateMessage;
    var client = useChatContext('useDeleteHandler').client;
    var t = useTranslationContext('useDeleteHandler').t;
    return function (event) { return __awaiter(void 0, void 0, void 0, function () {
        var data, e_1, errorMessage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    event.preventDefault();
                    if (!(message === null || message === void 0 ? void 0 : message.id) || !client || !updateMessage) {
                        return [2 /*return*/];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.deleteMessage(message.id)];
                case 2:
                    data = _a.sent();
                    updateMessage(data.message);
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
                    if (notify)
                        notify(errorMessage || t('Error deleting message'), 'error');
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); };
};
