import { ComponentType } from 'react';
import { Options } from 'react-markdown';
import { MentionProps } from './Mention';
import type { ReactMarkdownProps } from 'react-markdown/lib/complex-types';
import type { PluggableList } from 'react-markdown/lib/react-markdown';
import type { UserResponse } from 'stream-chat';
import type { DefaultStreamChatGenerics } from '../../../types/types';
export declare type RenderTextPluginConfigurator = (defaultPlugins: PluggableList) => PluggableList;
export declare const defaultAllowedTagNames: Array<keyof JSX.IntrinsicElements | 'emoji' | 'mention'>;
export declare const markDownRenderers: RenderTextOptions['customMarkDownRenderers'];
export declare type RenderTextOptions<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> = {
    allowedTagNames?: Array<keyof JSX.IntrinsicElements | 'emoji' | 'mention' | (string & {})>;
    customMarkDownRenderers?: Options['components'] & Partial<{
        emoji: ComponentType<ReactMarkdownProps>;
        mention: ComponentType<MentionProps<StreamChatGenerics>>;
    }>;
    getRehypePlugins?: RenderTextPluginConfigurator;
    getRemarkPlugins?: RenderTextPluginConfigurator;
};
export declare const renderText: <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(text?: string, mentionedUsers?: UserResponse<StreamChatGenerics>[] | undefined, { allowedTagNames, customMarkDownRenderers, getRehypePlugins, getRemarkPlugins, }?: RenderTextOptions) => JSX.Element | null;
//# sourceMappingURL=renderText.d.ts.map